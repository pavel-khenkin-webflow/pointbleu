import { gsap, ScrollTrigger, SplitText } from 'gsap/all';

function init() {
  gsap.registerPlugin(ScrollTrigger, SplitText);
  let mm = gsap.matchMedia();
  const mindTitle = document.querySelector('.main_content');
  const isMobile = window.innerWidth < 479;

  // === Header Animation ===
  const navComponent = document.querySelector('.header');
  const logoSmall = document.querySelector('.header_logo-small');
  const logoLarge = document.querySelector('.header_logo-large');

  let lastScrollTop = 0;
  let lastDirection = null;
  let ticking = false;
  let delayTimeout = null;
  let isAnimating = false;
  let isHeaderHidden = false;
  let hasScrolled = false; // –§–ª–∞–≥, –±—ã–ª –ª–∏ —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

  const threshold = 3 * parseFloat(getComputedStyle(document.documentElement).fontSize);

  function handleScroll() {
    if (!hasScrolled) return; // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Å–∫—Ä–æ–ª–ª–∏—Ç—å

    if (!ticking) {
      requestAnimationFrame(() => {
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;
        const direction = currentScroll > lastScrollTop ? 'down' : 'up';

        lastScrollTop = currentScroll;

        if (currentScroll <= threshold) {
          if (!isHeaderHidden) {
            ticking = false;
            return;
          }

          gsap.to(navComponent, { y: 0, duration: 0.2, ease: "linear" });
          isHeaderHidden = false;
          lastDirection = null;
          ticking = false;
          return;
        }

        if (direction === lastDirection || delayTimeout || isAnimating) {
          ticking = false;
          return;
        }

        lastDirection = direction;
        isAnimating = true;

        const tl = gsap.timeline({
          onComplete: () => {
            isAnimating = false;
            if (window.pageYOffset <= threshold) {
              gsap.to(navComponent, { y: 0, duration: 0.2, ease: "linear" });
              isHeaderHidden = false;
              lastDirection = null;
            }
          }
        });

        if (direction === 'down') {
          tl.to(logoLarge, { width: '2.125em', duration: 0.35, ease: "linear" })
            .to(logoLarge, { opacity: 0, duration: 0.2 })
            .to(logoSmall, { opacity: 1, duration: 0.2 }, '+=0.1')
            .to(navComponent, { y: '-100%', duration: 0.2, ease: "linear", delay: 0.5 })
            .add(() => { isHeaderHidden = true; });
        } else {
          tl.to(navComponent, { y: 0, duration: 0.2, ease: "linear" })
            .add(() => { isHeaderHidden = false; });
        }

        delayTimeout = setTimeout(() => {
          delayTimeout = null;
        }, 1000);

        ticking = false;
      });

      ticking = true;
    }
  }

  // === Burger Menu Animation Pause ===
  function toggleAnimationsBasedOnLock() {
    const headerMenu = document.querySelector('.header_menu');
    if (!headerMenu) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç

    console.log('MutationObserver: –ö–ª–∞—Å—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞', headerMenu.classList.value);

    if (headerMenu.classList.contains('is--active')) {
      console.log('üõë GSAP –∞–Ω–∏–º–∞—Ü–∏–∏ –ü–ê–£–ó–ê: is--active –∞–∫—Ç–∏–≤–µ–Ω');
      gsap.globalTimeline.pause(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ GSAP-–∞–Ω–∏–º–∞—Ü–∏–∏
      gsap.to(navComponent, { y: 0, duration: 0.2, ease: "linear" }); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–µ–¥–µ—Ä
      isHeaderHidden = false;
    } else {
      console.log('‚ñ∂Ô∏è GSAP –∞–Ω–∏–º–∞—Ü–∏–∏ –í–û–ó–û–ë–ù–û–í–õ–ï–ù–´: is--active —É–¥–∞–ª–µ–Ω');
      gsap.globalTimeline.resume(); // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ GSAP-–∞–Ω–∏–º–∞—Ü–∏–∏
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ `.header_menu`, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å observer
  const headerMenu = document.querySelector('.header_menu');
  if (headerMenu) {
    const observer = new MutationObserver(() => toggleAnimationsBasedOnLock());
    observer.observe(headerMenu, { attributes: true, attributeFilter: ['class'] });
  } else {
    console.warn('‚ö†Ô∏è Warning: .header_menu –Ω–µ –Ω–∞–π–¥–µ–Ω. Observer –Ω–µ –∑–∞–ø—É—â–µ–Ω.');
  }

  // === ScrollTrigger –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Ö–µ–¥–µ—Ä–∞ ===
  ScrollTrigger.create({
    trigger: '.section_hero',
    start: 'bottom top', // –§–æ–Ω —Ö–µ–¥–µ—Ä–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–∞ main_content
    onEnter: () => gsap.to(navComponent, { backgroundColor: '#fff', duration: 0.4, ease: 'power1.out' }),
    onEnterBack: () => gsap.to(navComponent, { backgroundColor: 'transparent', duration: 0.4, ease: 'power1.out' }),
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.addEventListener('load', function () {
    if (window.pageYOffset > threshold) {
      gsap.set(navComponent, { y: 0 });
      isHeaderHidden = false;
      hasScrolled = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    }
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç–∏–µ —Ö–µ–¥–µ—Ä–∞ **—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞**
  window.addEventListener('scroll', function () {
    if (!hasScrolled) {
      hasScrolled = true; // –§–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–æ–ª–ª
      return;
    }
    handleScroll();
  });

  // === Other Animations ===

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞ "mind"
  function updateMindTitlePosition() {
    if (mindTitle) {
      const mindTitleWidth = mindTitle.scrollWidth;
      const offset = mindTitleWidth - window.innerWidth;
      const mindTl = gsap.timeline({ scrollTrigger: { trigger: '.section_mind', start: '30% top', end: 'bottom bottom', scrub: 2 } });

      if (offset > 0) {
        mindTl.clear(); // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        mindTl.to(mindTitle, { x: `-${offset}px` });
      } else {
        mindTl.clear();
        mindTl.to(mindTitle, { x: 0 });
      }
    }
  }

  // –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è
  function debounce(func, delay) {
    let timeout;
    return function() {
      const context = this;
      const args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), delay);
    };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
  window.addEventListener('resize', debounce(updateMindTitlePosition, 200));

  // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  updateMindTitlePosition();
  
  if (!isMobile) {
      const phTitle = new SplitText('[da="about-title"]', { type: 'words, chars' });
      gsap.timeline({
        scrollTrigger: {
          trigger: '.philosophy_top-left',
          start: 'top center',
          end: '80% center',
          scrub: 1,
        },
      }).to(phTitle.chars, {
        color: '#3B52FB',
        stagger: 0.3,
        ease: 'none',
      });
    } else {
      const phTitleMobile = new SplitText('[da="about-title-mobile"]', { type: 'words, chars' });
      gsap.timeline({
        scrollTrigger: {
          trigger: '.philosophy_top-left',
          start: 'top center',
          end: 'bottom center',
          scrub: 1,
        },
      }).to(phTitleMobile.chars, {
        color: '#3B52FB',
        stagger: 0.3,
        ease: 'none',
      });
    }

  /*=========== Our Focus ===========*/
  // Cards
  const phCards = document.querySelectorAll('.philosophy_card');

  mm.add(
    {
      isDesktop: '(min-width: 767px)',
    },
    (context) => {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å is--active –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
      phCards[2].classList.add('is--active');
  
      phCards.forEach((card) => {
        const cardTitle = card.querySelector('.h3');
        const originalFontSize = window.getComputedStyle(cardTitle).fontSize; // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
  
        card.addEventListener('mouseenter', function () {
          // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å is--active —É –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
          phCards.forEach((c) => c.classList.remove('is--active'));
  
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
          phCards.forEach((c) => {
            const title = c.querySelector('.h3');
            gsap.to(title, {
              fontSize: originalFontSize,
              duration: 0.4,
              ease: 'power1.out',
            });
          });
  
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å is--active —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
          card.classList.add('is--active');
  
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä h3
          gsap.to(cardTitle, {
            fontSize: '3.375em',
            duration: 0.4,
            ease: 'power1.out',
          });
  
          ScrollTrigger.refresh();
        });
  
        card.addEventListener('mouseleave', function () {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä h3 –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
          gsap.to(cardTitle, {
            fontSize: originalFontSize,
            duration: 0.4,
            ease: 'power1.out',
          });
        });
      });
  
      // Support - –±–ª–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π .charity_content
      const supTl = gsap.timeline({
        scrollTrigger: {
          trigger: '.section_charity',
          start: 'top center',
          end: 'center center',
          scrub: 2,
        },
      });
  
      supTl.to(
        '.charity_content',
        {
          opacity: 1,
          duration: 0.5,
          ease: 'power1.out',
        },
        '<'
      );
    }
  );
  
  mm.add(
    {
      isDesktop: '(max-width: 766px)',
    },
    (context) => {
      function mobCardInit() {
        phCards[0].classList.add('is--active');
        console.log('Class added, waiting for resize...');
      }
  
      // –°–æ–∑–¥–∞—ë–º ResizeObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã—Å–æ—Ç—ã —Å–µ–∫—Ü–∏–∏
      const observer = new ResizeObserver(() => {
        ScrollTrigger.refresh(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        console.log('Height changed, ScrollTrigger refreshed!');
      });
  
      const section = document.querySelector('.section_philosophy');
      observer.observe(section);
  
      setTimeout(() => {
        mobCardInit();
        setTimeout(() => {
          observer.disconnect();
          console.log('Observer disconnected.');
        }, 2000);
      }, 1000);
  
      phCards.forEach((card) => {
        const cardTitle = card.querySelector('.h3');
        const originalFontSize = window.getComputedStyle(cardTitle).fontSize; // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä h3
  
        card.addEventListener('click', function () {
          // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å is--active —É –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
          phCards.forEach((c) => c.classList.remove('is--active'));
  
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏—Ö –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
          phCards.forEach((c) => {
            const title = c.querySelector('.h3');
            gsap.to(title, {
              fontSize: originalFontSize,
              duration: 0.4,
              ease: 'power1.out',
            });
          });
  
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å is--active –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
          card.classList.add('is--active');
  
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä h3
          gsap.to(cardTitle, {
            fontSize: '3em',
            duration: 0.4,
            ease: 'power1.out',
          });
  
          ScrollTrigger.refresh();
        });
      });
  
      // Support - –∞–Ω–∏–º–∞—Ü–∏—è .charity_content
      const supTl = gsap.timeline({
        scrollTrigger: {
          trigger: '.section_charity',
          start: 'top center',
          end: 'bottom center',
          scrub: 2,
        },
      });
  
      supTl.to(
        '.charity_content',
        {
          opacity: 1,
          duration: 0.5,
          ease: 'power1.out',
        },
        '<'
      );
    }
  );
  
/* ======== Our Focus ========*/










  // Team section
  const teamTl = gsap.timeline({
    scrollTrigger: {
      trigger: '.team_content',
      start: '30% bottom',
      end: 'bottom center',
      scrub: 1,
    },
  });
  teamTl.to('.team_line', {
    x: '110%',
    duration: 1,
    ease: 'none',
  });
  teamTl.to(
    '.team_line-reverse',
    {
      x: '-40%',
      duration: 1,
      ease: 'none',
    },
    0
  );
// –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
const teamLine = new SplitText('.team_line', { type: 'words' });

// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
teamLine.words.forEach(word => {
  word.classList.add('hoverable-word');
});
// –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è .team_line-reverse
const teamLineReverse = new SplitText('.team_line-reverse', { type: 'words' });

// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
teamLineReverse.words.forEach(word => {
  word.classList.add('hoverable-word');
});
  
}

document.addEventListener('DOMContentLoaded', init);
